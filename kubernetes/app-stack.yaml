apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.prod.yml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: page-db
  name: page-db
  namespace: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: page-db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.prod.yml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-backend-network: "true"
        io.kompose.service: page-db
    spec:
      containers:
        - image: mongo:latest
          name: database
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: webpage-db-data
      restartPolicy: Always
      volumes:
        - name: webpage-db-data
          persistentVolumeClaim:
            claimName: webpage-db-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.prod.yml
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: page-db
  name: page-db
  namespace: devops
spec:
  selector:
    io.kompose.service: page-db
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.prod.yml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: page-server
  name: page-server
  namespace: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: page-server
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.prod.yml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-backend-network: "true"
        io.kompose.service: page-server
    spec:
      containers:
        - envFrom:
          - configMapRef:
              name: app-env-vars
          env:
          - name: SMTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp-secret
                key: SMTP_PASSWORD
          image: chmaikos/devops-back:latest
          imagePullPolicy: Always
          name: backend
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.prod.yml
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: page-server
  name: page-server
  namespace: devops
spec:
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: page-server
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-secrets
  name: nginx-secrets
  namespace: devops
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: webpage-db-data
  name: webpage-db-data
  namespace: devops
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../../docker/docker-compose.prod.yml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: frontend
  name: frontend
  namespace: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../../docker/docker-compose.prod.yml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-backend-network: "true"
        io.kompose.service: frontend
    spec:
      containers:
        - env:
            - name: FRONTEND
              value: devops.red-net.gr
          image: chmaikos/devops-front:kube
          imagePullPolicy: Always
          name: frontend
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../../docker/docker-compose.prod.yml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: frontend
  name: frontend
  namespace: devops
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    io.kompose.service: frontend
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: page-server-ingress
  namespace: devops
  annotations:
    traefik.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: traefik
  rules:
  - host: devops.red-net.gr
    http:
      paths:
      # For /api, forward to page-server
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: page-server
            port:
              number: 3000
      # For everything else, serve static files
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
  tls:
  - hosts:
    - devops.red-net.gr
    secretName: devops-red-net-gr-cert
